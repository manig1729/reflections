What happens when you initialize a repository? Why do you need to do it?

	A .git file is created, and the group of files become a repository. We
	need to do it as the history of files can only be tracked if the files
	are part of a repository.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	Staging area behaves as an intermediate between the working directory and
	the repository. It gives us a buffer, we add stuff to the staging area,
	then commit everything in the staging area to the repository.

How can you use the staging area to make sure you have one commit per logical
change?

	Just add the given file(s) that represent one logical change to the
	staging area before you commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	When one wants to try an experimental version that doesn't need to be
	included in the main version - like changing language, making a game
	easy or difficult etc.
	
	Branches would allow one to stay organised and continue working on both
	versions without affecting each other and keeping everything 'clean'.

How do the diagrams help you visualize the branch structure?

	They help us see what all commits have been made in the different branches.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	It allows the changes made in both branches from the time of splitting to
	be joined and create a combined version without any fuss.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

	Pros : Makes our work easier;
	Cons : Takes away control from the user;
